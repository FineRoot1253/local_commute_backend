#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var app_auth = require('../app_auth');
var debug = require('debug')('local-commute:server');
var http = require('http');
const httpProxy = require('http-proxy');
const authServer = httpProxy.createProxyServer({
  target : process.env.AUTH_URL,
  secure : false
});
const resourceServer = httpProxy.createProxyServer({
  target : process.env.RESOURCE_URL,
  secure : false
});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.RESOURCE_PORT || '4000');
var authPort = normalizePort(process.env.AUTH_PORT || '5000'); 
var porxyPort = normalizePort(process.env.PROXY_PORT || '6000');

/**
 * Create Proxy server
 */
http.createServer((req, res)=>{
  if(req.url.startsWith('/auth')||req.url.startsWith('/user/emailOTPverify')||req.url.startsWith('/user/register')||req.url.startsWith('/user/verifyEmail')){
    authServer.web(req, res);
  }
  else{
      resourceServer.web(req, res);
  }
}).listen(porxyPort);

app.set('port', port);
app_auth.set('port', authPort);

/**
 * Create HTTP server.
 */

var app_server = http.createServer(app);
var auth_server = http.createServer(app_auth); 

/**
 * Listen on provided port, on all network interfaces.
 */

 app_server.listen(port);
 app_server.on('error', onError);
 app_server.on('listening', onAppListening);

 auth_server.listen(authPort);
 auth_server.on('error', onError);
 auth_server.on('listening', onAuthAppListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onAppListening() {
  var addr = app_server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
function onAuthAppListening() {
  var addr = auth_server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
